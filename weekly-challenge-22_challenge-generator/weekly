#!/usr/bin/env python

"""
Command line script to generate the boilerplate for weekly challenge
Run with -h for a list of arguments
"""

import argparse
import os
import re
import shutil
import sys

def main():

    #parses arguments
    parser = argparse.ArgumentParser(description="Generate the boilerplate for weekly challenge")
    parser.add_argument( "challenge_name",
                    action="store",
                    help="the name of the challenge")
    args = parser.parse_args()

    #manipulates inputs
    path_here        = os.path.dirname( os.path.realpath( __file__ )  ) #this may not worked in more complex cases with modules
    path_boilerplate = os.path.join( path_here, "boilerplate" )
    path_parent      = os.path.dirname( path_here )
    sublime_file     = "project.sublime-project"
    project_hashed   = re.sub( r'[^a-zA-Z0-9_ ]', '', args.challenge_name )
    project_hashed   = re.sub( r'[ _]', '-', project_hashed )

    #extracts number
    stem = "weekly-challenge-"
    number = 0
    matcher = re.compile( "^"+stem+"(\d+)" )
    for folder in os.listdir( path_parent ):
        matched = matcher.match( folder )
        if not matched:
            continue
        number = max( number, int( matched.group( 1 ) ) )
    number = '%02d' % ( number + 1 )
    path_new = os.path.join( path_parent, "weekly-challenge-" + number + "_" + project_hashed )

    #creates boilerplate with challenge specific data
    shutil.copytree( path_boilerplate, path_new )
    with open( os.path.join( path_boilerplate, sublime_file ), "r" ) as source:
        sourcetext = source.read();
    sourcetext = re.sub( '{{path}}', path_new, sourcetext )
    with open( os.path.join( path_new, sublime_file ), "w" ) as destination:
        destination.write( sourcetext );

    #exits with status
    print "done " + path_new
    sys.exit( 0 )

if __name__ == "__main__":
    main()