# =ITunesLibraryWriter
# responds to event raised by ITunesLibraryCallbacks

class ITunesLibraryWriter

  #takes a filehandler as argument
  def initialize( *args )

    case args.size
    when 1
      @filehandle   = args[0]
    else
      raise ArgumentError, "This class takes 1 argument."
    end
    @node_separator = "\n       "
    @track_separator = "\n    "
    @top_level = Hash.new
  end

  #called by ITunesLibraryEvent
  #prints a complete playlist
  def playlist_end playlist
      playlist_print playlist
  end

  #called by ITunesLibraryEvent
  #prints a complete track
  def track_end track
      track_print track
  end

  #called by ITunesLibraryEvent
  #prints the opening plist tag
  def library_start
    @filehandle << '<plist version="1.0">'
  end

  #called by ITunesLibraryEvent
  #prints the opening plist tag
  def library_end
    @filehandle << "\n</plist>"
  end

  #called by ITunesLibraryEvent
  #prints the opening dict tag
  def top_level_start element_name="dict"
    @filehandle << "\n<#{element_name}>"
  end

  #called by ITunesLibraryEvent
  #prints the closing dict tag
  def top_level_end element_name="dict"
    @filehandle << "\n</#{element_name}>"
  end

  #called by ITunesLibraryEvent
  #prints the opening dict tag for tracks
  def tracks_collection_start
    @filehandle << "\n\t<key>Tracks</key>\n\t<dict>"
  end

  #called by ITunesLibraryEvent
  #prints the opening dict tag for tracks
  def playlists_collection_start
    @filehandle << "\n\t<key>Playlists</key>\n\t<array>"
  end

  #called by ITunesLibraryEvent
  #prints the closing dict tag for tracks
  def tracks_collection_end
    @filehandle << "\n\t</dict>"
  end

  #called by ITunesLibraryEvent
  #prints the closing dict tag for playlists
  def playlists_collection_end
    @filehandle << "\n\t</array>"
  end

  #called by ITunesLibraryEvent
  #prints the opening dict tag
  def top_level_row row
    @top_level[row[:key]] = row[:value]
    track_row_print row, 1
  end

  #top level keys are saved in a global object. this method returns it
  def meta the_key
    return @top_level[the_key]
  end

  #prints a complete playlist
  def playlist_print playlist
    @filehandle << @track_separator + "<dict>"
    playlist[:dict].each { |row|
      track_row_print row
    }
    if nil != playlist[:items]
      @filehandle << "\n\t\t\t<key>Playlist Items</key>\n\t\t\t<array>"
      playlist[:items].each { |row|
        playlist_item_row_print row
      }
      @filehandle << "\n\t\t\t</array>"
    end
    @filehandle << @track_separator + "</dict>"
  end

  #prints a complete track
  def track_print track
    @filehandle << @track_separator + "<key>#{track[:key]}</key>"
    @filehandle << @track_separator + "<dict>"
    track[:dict].each { |row|
      track_row_print row
    }
    @filehandle << @track_separator + "</dict>"
  end

  #prints the row generated by track_row_string
  def track_row_print row, tabs=3
    @filehandle << track_row_string( row, tabs )
  end

  #prints the row generated by track_row_string
  def playlist_item_row_print row, tabs=5
    @filehandle << "\n\t\t\t\t<dict>"
    @filehandle << track_row_string( row, tabs )
    @filehandle << "\n\t\t\t\t</dict>"
  end

  #takes an hash with { :key :value :type } and outputs
  #    <key>KEY</key><TYPE>VALUE</TYPE>
  def track_row_string row, tabs=3
    k = row[:key]
    v = row[:value]
    t = row[:type]
    return "\n" + ( "\t"*tabs ) + "<key>#{k}</key><#{t}>#{v}</#{t}>"
  end
end