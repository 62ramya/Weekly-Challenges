#!/usr/bin/env node

function list(val) {
  return val.split(',');
}

var
    program = require('commander')
  , child_process = require('child_process')
  , fs = require('fs')
  , util = require('util')
  , files
  , new_files = []
  , nextFile
  , counter  = 0
  , zeroPad = function(){ return ("00000000" + counter).substr(-program.zero) + " " ; }
  ;

//commander is used to read in command line arguments
program
  .version('0.1.0')
  .usage(' [options] -s <dir1,dir2,...> -o <dir>')
  .option('-s, --sequence <dir1,dir2,...>', 'Comma separated list of dir (at least two)', list)
  .option('-o, --output <dir>', 'Output dir', "" )
  .option('-z, --zero [zeros]', 'Zero padding', 3 )
  .parse(process.argv);


//checks command input
if( 1 >= program.sequence.length ||
   !program.output ){
  program.help();
}
program.sequence.forEach( function( el ){
  if( !fs.existsSync( el ) ){
    program.help();
  }
})

//empties dir and recreates it
//RADAR this is not recursive
if( fs.existsSync( program.output ) ){

  files = fs.readdirSync(program.output);
  files
    .forEach( function(file){
      fs.unlinkSync( program.output + '/' + file)
    });
  fs.rmdirSync(program.output);

}
fs.mkdirSync(program.output);

//collects list of files
files = [];

program.sequence.
  filter( function( file ){

    return "." !== file.charAt( 0 );

  }).
  forEach( function( dir ){

    var file_list = fs.readdirSync( dir );
    file_list = file_list.map( function( file ){

      counter += 1;
      return {
        src: dir + "/" + file,
        dest: program.output + "/" +
                file
                  .replace( /^[\d.+-]+ ?/, zeroPad )
                  .replace( /[,\?\!\&]/g, "" )
                  .replace( /^(.+) ?\.mp3$/g, function(m,m1){ return m1.substr( 0, 32 ) +".mp3";} )
      };

  });
  files = files.concat( file_list );
})

nextFile = function _nextFile(){

  if( 0 === files.length ){
    return;
  }

  var
      file_obj = files.shift()
    , file_src = file_obj.src
    , file_dest = file_obj.dest
    , rs = fs.createReadStream( file_src )
    , ws = fs.createWriteStream( file_dest )
    ;


    rs.on('error', function(err) {
      console.log( 'error', arguments);
      ws.end(err);
    });

    ws.on('error', function(err) {
      console.log( 'error ws', err);
    });

    //when the source ends, ws.end will still write all outstanding data
    rs.on( "close", function () {
      ws.end();
    });

    //when the destination has finished writing all outstanding data, we can finally move on
    ws.on( "close", function(){
      nextFile();
    });

    //this does the actual copying
    rs.pipe(ws);


    console.log( "copying file", file_src, "to", file_dest )
};

//start
nextFile();