#!/usr/bin/env node


var mandolin_helper = require( "./mandolin-helper" )
  , mandolin   = new mandolin_helper()
  , pth_src    = "/Users/fritz/Documents/CAPTAIN_MANDOLIN"
  , pth_target = "/Users/fritz/Documents/CAPTAIN_DB"
  , files
  , bash_command
  , set_list     = []
  , final_list   = []
  , songs_files  = []
  , must_haves   = []
  , fillers      = []
  , spoken_de = []
  , epics_de = []
  , epicsGrouped_de = []
  , spoken_it = []
  , epics_it = []
  , epicsGrouped_it = []
  , spoken_en = []
  , epics_en = []
  , epicsGrouped_en = []
  , spoken_files = []
  , epic_files = []
  , counter = 0
  , reEpics = "^\\d\\d\\d .+\.mp3$"
  , bash_file = "bash_file.sh"
  ;

files = mandolin.collectFiles( pth_src );
mandolin.logToFile( "files", files );

file_list = mandolin.asFileMoveList( files, pth_target );
mandolin.logToFile( "file_list", file_list );

set_list = mandolin.getFilesWhere( file_list, { field: "path", regex: "/TITLE" } );

spoken_de = mandolin.getFilesWhere( file_list, { field: "path", regex: "/SPOKEN/DE" } );
epics_de = mandolin.removeFilesWhere( spoken_de, { field: "file", regex: reEpics } );
epics_de = mandolin.getEpicsList( epics_de );
epicsGrouped_de = mandolin.groupBy( epics_de, "/Users/fritz/Documents/CAPTAIN_MANDOLIN/SPOKEN/DE" );
mandolin.logToFile( "epicsGrouped_de", epicsGrouped_de );
epicsGrouped_de = mandolin.randomShift(
                    mandolin.spreadGroup( epicsGrouped_de, "/Users/fritz/Documents/CAPTAIN_MANDOLIN/SPOKEN/DE" )
                  );
mandolin.logToFile( "epicsGroupedSpread_de", epicsGrouped_de );

spoken_it = mandolin.getFilesWhere( file_list, { field: "path", regex: "/SPOKEN/IT" } );
epics_it = mandolin.removeFilesWhere( spoken_it, { field: "file", regex: reEpics } );
epics_it = mandolin.getEpicsList( epics_it );
epicsGrouped_it = mandolin.groupBy( epics_it, "/Users/fritz/Documents/CAPTAIN_MANDOLIN/SPOKEN/IT" );
mandolin.logToFile( "epicsGrouped_it", epicsGrouped_it );
epicsGrouped_it = mandolin.randomShift(
                    mandolin.spreadGroup( epicsGrouped_it, "/Users/fritz/Documents/CAPTAIN_MANDOLIN/SPOKEN/IT" )
                  );
mandolin.logToFile( "epicsGroupedSpread_it", epicsGrouped_it );

spoken_en = mandolin.getFilesWhere( file_list, { field: "path", regex: "/SPOKEN/EN" } );
epics_en = mandolin.removeFilesWhere( spoken_en, { field: "file", regex: reEpics } );
epics_en = mandolin.getEpicsList( epics_en );
epicsGrouped_en = mandolin.groupBy( epics_en, "/Users/fritz/Documents/CAPTAIN_MANDOLIN/SPOKEN/EN" );
mandolin.logToFile( "epicsGrouped_en", epicsGrouped_en );
epicsGrouped_en = mandolin.randomShift(
                    mandolin.spreadGroup( epicsGrouped_en, "/Users/fritz/Documents/CAPTAIN_MANDOLIN/SPOKEN/EN" )
                  );
mandolin.logToFile( "epicsGroupedSpread_en", epicsGrouped_en );

spoken_files = mandolin.shuffle( spoken_de.concat( spoken_it, spoken_en ) );
epic_files = mandolin.transpose( epicsGrouped_de, epicsGrouped_en, epicsGrouped_it );
mandolin.logToFile( "epic_files", epic_files );
spoken_files = mandolin.flatten( mandolin.transpose( epic_files, spoken_files ) );

mandolin.logToFile( "spoken_files", spoken_files );
mandolin.logToFile( "spoken_de", spoken_de );
mandolin.logToFile( "epics_de", epics_de );


must_haves  = mandolin.getFilesWhere( file_list, { field: "path", regex: "/MUSIC/MUST_HAVE" } );
mandolin.logToFile( "must_haves", must_haves );
fillers  = mandolin.getFilesWhere( file_list, { field: "path", regex: "/MUSIC/FILLERS" } );
mandolin.logToFile( "fillers", fillers );
counter = spoken_files.length - must_haves.length;
songs_files = mandolin
              .shuffle(
                must_haves
                .concat(
                   mandolin
                  .shuffle( fillers )
                  .slice( 0, Math.max( 0, counter ) )
                )
              );
mandolin.logToFile( "songs_files", songs_files );

set_list = set_list.concat( mandolin.transpose( spoken_files,  songs_files ) );
mandolin.logToFile( "set_list", set_list );

final_list = mandolin.prepareFinalList( set_list, pth_target );
mandolin.logToFile( "final_list", final_list );

bash_command = mandolin.generateBash( bash_file, final_list, pth_target )

process.exit(0);

